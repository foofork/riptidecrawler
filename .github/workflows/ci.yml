name: Optimized CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  # Note: RUSTFLAGS moved to per-job config to avoid applying x86 flags to WASM
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_LOG: warn
  # Optimize for CI speed
  CARGO_BUILD_JOBS: 4

jobs:
  # Fast preliminary checks
  check:
    name: Quick Checks
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=rust-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-wasip2
          components: rustfmt, clippy

      - name: Restore Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.cache-key.outputs.key }}
          shared-key: "ci-cache"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Check formatting
        run: cargo fmt --all --check

  # Parallel build matrix
  build:
    name: Build (${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: check
    strategy:
      fail-fast: false
      matrix:
        target:
          - native
          - wasm32-wasip2
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target == 'wasm32-wasip2' && 'wasm32-wasip2' || '' }}

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Restore Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.check.outputs.cache-key }}-${{ matrix.target }}
          shared-key: "build-cache-${{ matrix.target }}"

      - name: Build native binaries
        if: matrix.target == 'native'
        env:
          RUSTFLAGS: "-Dwarnings -C target-cpu=x86-64-v2"  # Baseline CPU for portability
        run: |
          # Incremental build with optimizations
          cargo build --release --workspace

      - name: Build WASM component with caching
        if: matrix.target == 'wasm32-wasip2'
        env:
          RUSTFLAGS: "-Dwarnings"  # Only warnings, NO x86 CPU flags for WASM
        run: |
          # Debug: Show versions and config
          echo "RUSTC: $(rustc -vV)"
          echo "CARGO: $(cargo --version)"
          echo "TARGET_DIR: ${CARGO_TARGET_DIR:-target}"
          echo "Building WASM with explicit package selection..."

          # Build with explicit package flag (uses workspace root target dir)
          cargo build --release --target wasm32-wasip2 -p riptide-extractor-wasm -v 2>&1 | tail -20

          # List what was actually built
          echo ""
          echo "Scanning for WASM artifacts in workspace target:"
          OUTDIR="${CARGO_TARGET_DIR:-target}"
          for T in wasm32-wasip2 wasm32-wasi; do
            if [ -d "$OUTDIR/$T/release" ]; then
              echo "Contents of $OUTDIR/$T/release:"
              ls -lh "$OUTDIR/$T/release/" | grep -E "\.wasm$" || echo "  (no .wasm files)"
              if [ -d "$OUTDIR/$T/release/deps" ]; then
                echo "Contents of $OUTDIR/$T/release/deps:"
                ls -lh "$OUTDIR/$T/release/deps/" | grep -E "\.wasm$" || echo "  (no .wasm files)"
              fi
            fi
          done

          # Bulletproof artifact collection
          echo ""
          echo "Collecting WASM artifacts..."
          mkdir -p wasm-dist
          FOUND=0

          for T in wasm32-wasip2 wasm32-wasi; do
            DIR="$OUTDIR/$T/release"
            if [ -d "$DIR" ]; then
              echo "Checking $DIR for .wasm files"
              # Prefer top-level .wasm over deps/*.wasm
              if compgen -G "$DIR/*.wasm" > /dev/null; then
                echo "Found top-level .wasm files in $DIR"
                cp "$DIR/"*.wasm wasm-dist/
                FOUND=1
                break
              fi
              # Fallback to deps (some setups leave artifacts there)
              if [ -d "$DIR/deps" ] && compgen -G "$DIR/deps/*.wasm" > /dev/null; then
                echo "Found .wasm files in $DIR/deps"
                cp "$DIR/deps/"*.wasm wasm-dist/
                FOUND=1
                break
              fi
            fi
          done

          if [ "$FOUND" -eq 0 ]; then
            echo "ERROR: No .wasm artifacts found!"
            echo "Directory tree:"
            find "$OUTDIR" -maxdepth 4 -type d -name "wasm32-*" -exec echo {} \; -exec ls -la {} \; || true
            exit 1
          fi

          echo ""
          echo "Collected artifacts:"
          ls -lh wasm-dist/

          # Optimize WASM binary if it exists
          if [ -f wasm-dist/riptide_extractor_wasm.wasm ]; then
            if command -v wasm-opt >/dev/null 2>&1; then
              echo "Optimizing with wasm-opt..."
              wasm-opt -Oz wasm-dist/riptide_extractor_wasm.wasm \
                -o wasm-dist/riptide_extractor_wasm.optimized.wasm
              echo "Optimized artifact size:"
              ls -lh wasm-dist/riptide_extractor_wasm.optimized.wasm
            fi
          fi

      - name: Cache WASM artifacts
        if: matrix.target == 'wasm32-wasip2'
        uses: actions/cache@v4
        with:
          path: |
            target/wasm32-wasip2/release/*.wasm
            wasm-dist/*.wasm
            ~/.cargo/registry/cache/
          key: wasm-artifacts-${{ hashFiles('wasm/riptide-extractor-wasm/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            wasm-artifacts-${{ hashFiles('wasm/riptide-extractor-wasm/Cargo.lock') }}-
            wasm-artifacts-

      - name: Verify native binaries exist
        if: matrix.target == 'native'
        run: |
          echo "Verifying native binaries were built..."
          for binary in riptide-api riptide-headless riptide-workers; do
            if [[ ! -f "target/release/$binary" ]]; then
              echo "❌ ERROR: Binary not found: target/release/$binary"
              exit 1
            fi
            echo "✅ Found: target/release/$binary ($(stat --format=%s target/release/$binary | numfmt --to=iec))"
          done

      - name: Upload native build artifacts
        if: matrix.target == 'native'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.target }}
          path: |
            target/release/riptide-api
            target/release/riptide-headless
            target/release/riptide-workers
          retention-days: 7
          compression-level: 6
          if-no-files-found: error

      - name: Upload WASM build artifacts
        if: matrix.target == 'wasm32-wasip2'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.target }}
          path: wasm-dist/*.wasm
          retention-days: 7
          compression-level: 6
          if-no-files-found: error

  # Parallel testing
  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: check
    strategy:
      fail-fast: false
      matrix:
        test-type:
          - unit
          - integration
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Restore Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.check.outputs.cache-key }}-test
          shared-key: "test-cache"

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        env:
          RUSTFLAGS: "-Dwarnings -C target-cpu=native"
        run: |
          cargo test --workspace --lib --bins -- --nocapture --test-threads=4

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          RUSTFLAGS: "-Dwarnings -C target-cpu=native"
        run: |
          cargo test --workspace --tests -- --nocapture --test-threads=2

  # Optimized Docker builds with caching
  docker-build:
    name: Docker Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        service: [api, headless]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-native
          path: artifacts/

      - name: Verify downloaded artifacts
        run: |
          echo "Verifying downloaded native artifacts..."
          ls -lah artifacts/
          for binary in riptide-api riptide-headless riptide-workers; do
            if [[ ! -f "artifacts/$binary" ]]; then
              echo "❌ ERROR: Downloaded binary not found: artifacts/$binary"
              exit 1
            fi
            echo "✅ Verified: artifacts/$binary"
          done

      - name: Download WASM artifacts
        if: matrix.service == 'api'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-wasm32-wasip2
          path: wasm-dist/

      - name: Verify WASM artifacts
        if: matrix.service == 'api'
        run: |
          echo "Verifying downloaded WASM artifacts..."
          ls -lah wasm-dist/
          if [[ ! -f wasm-dist/*.wasm ]]; then
            echo "❌ ERROR: No WASM files found in wasm-dist/"
            exit 1
          fi
          echo "✅ WASM artifacts verified"

      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.${{ matrix.service }}
          tags: riptide-${{ matrix.service }}:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/riptide-${{ matrix.service }}.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.service }}
          path: /tmp/riptide-${{ matrix.service }}.tar
          retention-days: 3

  # Binary size monitoring
  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-native
          path: artifacts/

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-wasm32-wasip2
          path: wasm-dist/

      - name: Verify artifacts before size check
        run: |
          echo "Verifying artifacts..."
          ls -lah artifacts/ wasm-dist/
          if [[ ! -f artifacts/riptide-api ]]; then
            echo "❌ ERROR: Native artifacts not found"
            exit 1
          fi
          echo "✅ Artifacts verified"

      - name: Check binary sizes
        run: |
          echo "📊 Binary Size Report"
          echo "====================="

          # Check native binaries
          for binary in artifacts/riptide-*; do
            if [[ -f "$binary" ]]; then
              size=$(stat --format=%s "$binary")
              size_mb=$(echo "scale=2; $size / 1024 / 1024" | bc)
              echo "$(basename "$binary"): ${size_mb}MB"

              # Size limits (adjust as needed)
              if (( $(echo "$size_mb > 100" | bc -l) )); then
                echo "⚠️  Warning: $(basename "$binary") is larger than 100MB"
              fi
            fi
          done

          # Check WASM binary
          find wasm-dist -name "*.wasm" 2>/dev/null | while read wasm_file; do
            if [[ -f "$wasm_file" ]]; then
              size=$(stat --format=%s "$wasm_file")
              size_kb=$(echo "scale=2; $size / 1024" | bc)
              echo "$(basename "$wasm_file"): ${size_kb}KB"

              # WASM size limit
              if (( $(echo "$size_kb > 1024" | bc -l) )); then
                echo "⚠️  Warning: $(basename "$wasm_file") is larger than 1MB"
              fi
            fi
          done

          echo "\n🎯 Optimization suggestions:"
          echo "- Use 'cargo bloat' to analyze binary composition"
          echo "- Consider feature flags to reduce binary size"
          echo "- Use 'wee_alloc' for WASM to reduce memory overhead"

  # Parallel security and quality checks
  quality:
    name: Quality & Security
    runs-on: ubuntu-latest
    needs: check
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Restore Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ needs.check.outputs.cache-key }}-quality
          shared-key: "quality-cache"

      - name: Install quality tools
        run: |
          cargo install cargo-deny cargo-audit cargo-bloat --locked

      - name: Security audit
        run: cargo audit --deny warnings || true

      - name: Dependency check
        run: cargo deny check

      - name: Binary bloat analysis
        run: |
          cargo bloat --release --crates > bloat-report.txt || true
          if [[ -f bloat-report.txt ]]; then
            echo "📊 Binary Bloat Analysis:"
            head -20 bloat-report.txt
          fi

  # Performance benchmarking
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-native
          path: artifacts/

      - name: Verify artifacts for benchmarking
        run: |
          echo "Verifying artifacts..."
          ls -lah artifacts/
          if [[ ! -f artifacts/riptide-api ]]; then
            echo "❌ ERROR: Native artifacts not found for benchmarking"
            exit 1
          fi
          echo "✅ Artifacts ready for benchmarking"

      - name: Run benchmarks
        run: |
          # Add benchmark commands here if available
          echo "🚀 Performance benchmarks would run here"
          echo "Placeholder for criterion benchmarks"

  # Final validation
  validate:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [build, test, docker-build, size-check]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "🔍 Validating pipeline results..."

          # Check if critical jobs succeeded
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi

          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Docker build failed"
            exit 1
          fi

          echo "✅ All critical checks passed!"
          echo "📈 Pipeline optimization targets:"
          echo "- ✅ Parallel execution implemented"
          echo "- ✅ WASM artifact caching active"
          echo "- ✅ Docker layer caching enabled"
          echo "- ✅ Binary size monitoring added"
          echo "- ✅ Incremental builds configured"

  # Cleanup to reclaim space
  cleanup:
    name: Build Cleanup
    runs-on: ubuntu-latest
    needs: [validate]
    if: always()
    steps:
      - name: Clean up build space
        run: |
          echo "🧹 Reclaiming build space..."

          # Clean Docker build cache (keep recent)
          docker system prune -f --filter "until=24h" || true

          # Clean cargo cache
          cargo cache --autoclean || true

          echo "💾 Space cleanup completed"