name: Refactoring Quality Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'crates/**/*.rs'
      - 'wasm/**/*.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
  push:
    branches: [main]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  quality-check:
    name: Quality Gate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all --check
        continue-on-error: false

      - name: Run Clippy (zero warnings policy)
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -A clippy::module_name_repetitions \
            -A clippy::must_use_candidate \
            -A clippy::missing_errors_doc \
            -A clippy::missing_panics_doc
        continue-on-error: false

      - name: Run tests
        run: cargo test --all-features --workspace
        continue-on-error: false

      - name: Check documentation
        run: |
          cargo doc --no-deps --all-features --document-private-items --workspace
        continue-on-error: false

      - name: Check file lengths
        run: |
          chmod +x scripts/check_file_lengths.sh
          ./scripts/check_file_lengths.sh
        continue-on-error: false
        env:
          MAX_LINES: 600

      - name: Security audit
        run: |
          cargo install --locked cargo-audit || true
          cargo audit
        continue-on-error: true

  build-validation:
    name: Build Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Build
        run: cargo build --all-features --workspace

      - name: Run tests
        run: cargo test --all-features --workspace

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: |
          cargo tarpaulin \
            --all-features \
            --workspace \
            --timeout 300 \
            --out Xml \
            --output-dir coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          fail_ci_if_error: false

  refactoring-metrics:
    name: Refactoring Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Count large files
        run: |
          echo "## Refactoring Progress Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          TOTAL_FILES=$(find crates wasm -name "*.rs" -not -path "*/target/*" -not -name "bindings.rs" -type f | wc -l)
          LARGE_FILES=$(find crates wasm -name "*.rs" -not -path "*/target/*" -not -name "bindings.rs" -type f -exec sh -c 'lines=$(wc -l < "$1"); if [ $lines -gt 600 ]; then echo "$1"; fi' _ {} \; | wc -l)

          echo "### File Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Total Rust files: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- Files >600 LOC: $LARGE_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- Target: 0 files >600 LOC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$LARGE_FILES" -gt 0 ]; then
            echo "### Files Requiring Refactoring" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find crates wasm -name "*.rs" -not -path "*/target/*" -not -name "bindings.rs" -type f -exec sh -c 'lines=$(wc -l < "$1"); if [ $lines -gt 600 ]; then echo "$lines $1"; fi' _ {} \; | sort -rn >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ðŸ“š See [REFACTORING_PLAN.md](docs/REFACTORING_PLAN.md) for details" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for improvements
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "### Changes in this PR" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.rs$' | while read file; do
              if [ -f "$file" ]; then
                lines=$(wc -l < "$file")
                echo "- $file: $lines lines" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
