name: API Contract Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/api/openapi.yaml'
      - 'crates/riptide-api/**'
      - 'tests/api/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/api/openapi.yaml'
      - 'crates/riptide-api/**'
      - 'tests/api/**'

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Test 1: Dredd Contract Testing
  dredd-contract-tests:
    name: Dredd API Contract Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        env:
          REDIS_URL: redis://localhost:6379
          RUST_LOG: info
          API_HOST: 0.0.0.0
          API_PORT: 8080
        run: |
          ./target/release/riptide-api > api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "Started API with PID: $API_PID"

      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8080/healthz; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done
          echo "❌ API failed to start within 60 seconds"
          echo "=== API Logs ==="
          cat api.log || echo "No logs found"
          exit 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dredd
        run: npm install -g dredd

      - name: Run Dredd API contract tests
        run: |
          dredd docs/api/openapi.yaml http://localhost:8080 \
            --reporter=html \
            --reporter=markdown \
            --output=dredd-report.html \
            --output=dredd-report.md

      - name: Upload Dredd report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dredd-contract-report
          path: |
            dredd-report.html
            dredd-report.md
          if-no-files-found: ignore

      - name: Upload API logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: dredd-api-logs
          path: api.log
          if-no-files-found: ignore

      - name: Stop API
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            echo "Stopping API (PID: $API_PID)"
            kill $API_PID || true
            sleep 2
            kill -9 $API_PID 2>/dev/null || true
          fi

  # Test 2: Schemathesis Fuzzing
  schemathesis-fuzzing:
    name: Schemathesis API Fuzzing
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        env:
          REDIS_URL: redis://localhost:6379
          RUST_LOG: info
          API_HOST: 0.0.0.0
          API_PORT: 8080
        run: |
          ./target/release/riptide-api > api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "Started API with PID: $API_PID"

      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8080/healthz; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done
          echo "❌ API failed to start within 60 seconds"
          echo "=== API Logs ==="
          cat api.log || echo "No logs found"
          exit 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Schemathesis
        run: pip install schemathesis

      - name: Run Schemathesis fuzzing tests
        run: |
          schemathesis run docs/api/openapi.yaml \
            --base-url http://localhost:8080 \
            --checks all \
            --max-examples=100 \
            --hypothesis-deadline=5000 \
            --show-errors-tracebacks

      - name: Upload API logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: schemathesis-api-logs
          path: api.log
          if-no-files-found: ignore

      - name: Stop API
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            echo "Stopping API (PID: $API_PID)"
            kill $API_PID || true
            sleep 2
            kill -9 $API_PID 2>/dev/null || true
          fi

  # Test 3: OpenAPI Spec Validation
  openapi-validation:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI validators
        run: |
          npm install -g @apidevtools/swagger-cli
          npm install -g @stoplight/spectral-cli

      - name: Validate OpenAPI syntax
        run: swagger-cli validate docs/api/openapi.yaml

      - name: Lint OpenAPI with Spectral
        run: |
          spectral lint docs/api/openapi.yaml \
            --format stylish \
            --fail-severity error

      - name: Check OpenAPI best practices
        run: |
          spectral lint docs/api/openapi.yaml \
            --format stylish

  # Test 4: API Response Time Testing
  performance-tests:
    name: API Performance Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Build RipTide API (release)
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        env:
          REDIS_URL: redis://localhost:6379
          RUST_LOG: info
          API_HOST: 0.0.0.0
          API_PORT: 8080
        run: |
          ./target/release/riptide-api > api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "Started API with PID: $API_PID"

      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8080/healthz; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done
          echo "❌ API failed to start within 60 seconds"
          echo "=== API Logs ==="
          cat api.log || echo "No logs found"
          exit 1

      - name: Install k6 (load testing)
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          k6 run --vus 10 --duration 30s - <<'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests must complete below 2s
            },
          };

          export default function() {
            let res = http.get('http://localhost:8080/healthz');
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            sleep(1);
          }
          EOF

      - name: Upload API logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: performance-api-logs
          path: api.log
          if-no-files-found: ignore

      - name: Stop API
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            echo "Stopping API (PID: $API_PID)"
            kill $API_PID || true
            sleep 2
            kill -9 $API_PID 2>/dev/null || true
          fi

  # Test 5: Security Scanning
  security-tests:
    name: API Security Scanning
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev pkg-config

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        env:
          REDIS_URL: redis://localhost:6379
          RUST_LOG: info
          API_HOST: 0.0.0.0
          API_PORT: 8080
        run: |
          ./target/release/riptide-api > api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          echo "Started API with PID: $API_PID"

      - name: Wait for API to be healthy
        run: |
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl --silent --fail http://localhost:8080/healthz; then
              echo "✅ API is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done
          echo "❌ API failed to start within 60 seconds"
          echo "=== API Logs ==="
          cat api.log || echo "No logs found"
          exit 1

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-a'
        continue-on-error: true

      - name: Upload API logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-api-logs
          path: api.log
          if-no-files-found: ignore

      - name: Stop API
        if: always()
        run: |
          if [ -n "$API_PID" ]; then
            echo "Stopping API (PID: $API_PID)"
            kill $API_PID || true
            sleep 2
            kill -9 $API_PID 2>/dev/null || true
          fi
