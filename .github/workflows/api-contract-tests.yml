name: API Contract Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/api/openapi.yaml'
      - 'crates/riptide-api/**'
      - 'tests/api/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/api/openapi.yaml'
      - 'crates/riptide-api/**'
      - 'tests/api/**'

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Test 1: Dredd Contract Testing
  dredd-contract-tests:
    name: Dredd API Contract Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        run: |
          ./target/release/riptide-api &
          echo "API_PID=$!" >> $GITHUB_ENV
          sleep 5

      - name: Wait for API to be healthy
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8080/healthz; do sleep 1; done'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dredd
        run: npm install -g dredd

      - name: Run Dredd API contract tests
        run: |
          dredd docs/api/openapi.yaml http://localhost:8080 \
            --reporter=html \
            --reporter=markdown \
            --output=dredd-report.html \
            --output=dredd-report.md

      - name: Upload Dredd report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dredd-contract-report
          path: |
            dredd-report.html
            dredd-report.md

      - name: Stop API
        if: always()
        run: kill $API_PID || true

  # Test 2: Schemathesis Fuzzing
  schemathesis-fuzzing:
    name: Schemathesis API Fuzzing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        run: |
          ./target/release/riptide-api &
          echo "API_PID=$!" >> $GITHUB_ENV
          sleep 5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Schemathesis
        run: pip install schemathesis

      - name: Run Schemathesis fuzzing tests
        run: |
          schemathesis run docs/api/openapi.yaml \
            --base-url http://localhost:8080 \
            --checks all \
            --hypothesis-max-examples=100 \
            --hypothesis-deadline=5000 \
            --show-errors-tracebacks \
            --report

      - name: Stop API
        if: always()
        run: kill $API_PID || true

  # Test 3: OpenAPI Spec Validation
  openapi-validation:
    name: Validate OpenAPI Specification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install OpenAPI validators
        run: |
          npm install -g @apidevtools/swagger-cli
          npm install -g @stoplight/spectral-cli

      - name: Validate OpenAPI syntax
        run: swagger-cli validate docs/api/openapi.yaml

      - name: Lint OpenAPI with Spectral
        run: |
          spectral lint docs/api/openapi.yaml \
            --format stylish \
            --fail-severity warn

      - name: Check OpenAPI best practices
        run: |
          spectral lint docs/api/openapi.yaml \
            --ruleset https://raw.githubusercontent.com/stoplightio/spectral/master/docs/reference/openapi-rules.md

  # Test 4: API Response Time Testing
  performance-tests:
    name: API Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build RipTide API (release)
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        run: |
          ./target/release/riptide-api &
          echo "API_PID=$!" >> $GITHUB_ENV
          sleep 5

      - name: Install k6 (load testing)
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz
          sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/

      - name: Run performance tests
        run: |
          k6 run --vus 10 --duration 30s - <<'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests must complete below 2s
            },
          };

          export default function() {
            let res = http.get('http://localhost:8080/healthz');
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            sleep(1);
          }
          EOF

      - name: Stop API
        if: always()
        run: kill $API_PID || true

  # Test 5: Security Scanning
  security-tests:
    name: API Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Build RipTide API
        run: cargo build --release --package riptide-api

      - name: Start RipTide API
        run: |
          ./target/release/riptide-api &
          echo "API_PID=$!" >> $GITHUB_ENV
          sleep 5

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Stop API
        if: always()
        run: kill $API_PID || true
