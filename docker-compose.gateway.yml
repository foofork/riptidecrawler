version: '3.8'

services:
  # Kong Gateway - API Gateway with Rate Limiting, Auth, Analytics
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - riptide-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong/kong-gateway:latest
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    networks:
      - riptide-network
    restart: on-failure

  kong:
    image: kong/kong-gateway:latest
    container_name: kong-gateway
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"  # Kong Proxy (API Gateway)
      - "8443:8443"  # Kong Proxy SSL
      - "8001:8001"  # Kong Admin API
      - "8444:8444"  # Kong Admin API SSL
      - "8002:8002"  # Kong Manager UI
    networks:
      - riptide-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RipTide API (backend service)
  riptide-api:
    build: .
    container_name: riptide-api
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - WASM_PATH=/app/wasm/riptide.wasm
    networks:
      - riptide-network
    restart: unless-stopped

  # Redis for RipTide
  redis:
    image: redis:7-alpine
    container_name: riptide-redis
    ports:
      - "6379:6379"
    networks:
      - riptide-network
    restart: unless-stopped

  # Swagger UI for API Documentation
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: riptide-swagger-ui
    ports:
      - "8081:8080"
    environment:
      SWAGGER_JSON: /openapi.yaml
    volumes:
      - ./docs/api/openapi.yaml:/openapi.yaml:ro
    networks:
      - riptide-network
    restart: unless-stopped

networks:
  riptide-network:
    driver: bridge

volumes:
  kong-data:

# Quick Setup:
# 1. Start services: docker-compose -f docker-compose.gateway.yml up -d
#
# 2. Configure Kong Gateway:
#    curl -i -X POST http://localhost:8001/services \
#      --data name=riptide-api \
#      --data url=http://riptide-api:8080
#
#    curl -i -X POST http://localhost:8001/services/riptide-api/routes \
#      --data paths[]=/api \
#      --data strip_path=true
#
# 3. Add rate limiting:
#    curl -X POST http://localhost:8001/services/riptide-api/plugins \
#      --data "name=rate-limiting" \
#      --data "config.minute=100" \
#      --data "config.policy=local"
#
# 4. Add API key authentication:
#    curl -X POST http://localhost:8001/services/riptide-api/plugins \
#      --data "name=key-auth"
#
# Access:
# - API via Kong Gateway: http://localhost:8000/api
# - Direct API: http://localhost:8080
# - Kong Admin API: http://localhost:8001
# - Kong Manager UI: http://localhost:8002
# - Swagger UI: http://localhost:8081
