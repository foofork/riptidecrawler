#!/bin/bash
# File Length Enforcement Script
# Checks that all Rust source files are under the specified line limit

set -e

MAX_LINES="${MAX_LINES:-600}"
VIOLATIONS=0
EXCLUDE_FILES=(
    "bindings.rs"  # Auto-generated by wit-bindgen
)

echo "========================================"
echo "File Length Check"
echo "========================================"
echo "Maximum allowed lines: $MAX_LINES"
echo "Checking Rust files in crates/..."
echo ""

# Function to check if file should be excluded
should_exclude() {
    local file="$1"
    local basename
    basename=$(basename "$file")

    for exclude in "${EXCLUDE_FILES[@]}"; do
        if [[ "$basename" == "$exclude" ]]; then
            return 0
        fi
    done
    return 1
}

# Find all Rust files
while IFS= read -r file; do
    # Skip excluded files
    if should_exclude "$file"; then
        echo "⊘ Skipping $file (auto-generated)"
        continue
    fi

    LINES=$(wc -l < "$file" | tr -d ' ')

    if [ "$LINES" -gt "$MAX_LINES" ]; then
        echo "❌ $file: $LINES lines (exceeds $MAX_LINES)"
        VIOLATIONS=$((VIOLATIONS + 1))
    else
        # Uncomment for verbose output
        # echo "✅ $file: $LINES lines"
        :
    fi
done < <(find crates wasm -name "*.rs" -not -path "*/target/*" -type f 2>/dev/null)

echo ""
echo "========================================"
if [ "$VIOLATIONS" -gt 0 ]; then
    echo "❌ FAILED: Found $VIOLATIONS file(s) exceeding $MAX_LINES lines"
    echo "========================================"
    echo ""
    echo "Action Required:"
    echo "1. Review the files listed above"
    echo "2. Refactor them according to docs/REFACTORING_PLAN.md"
    echo "3. Ensure each file has a single, focused responsibility"
    echo ""
    exit 1
else
    echo "✅ PASSED: All files within $MAX_LINES line limit"
    echo "========================================"
    exit 0
fi
