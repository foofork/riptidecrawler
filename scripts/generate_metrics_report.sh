#!/bin/bash
# Generate CI/CD metrics report
# Usage: ./scripts/generate_metrics_report.sh [days]

set -e

DAYS=${1:-10}
METRICS_DIR="metrics"

echo "# CI/CD Metrics Report"
echo "Generated: $(date)"
echo "Period: Last $DAYS data points"
echo ""

# Build metrics
if [ -f "$METRICS_DIR/build_metrics.csv" ]; then
    echo "## Build Time Analysis"
    echo ""
    echo "### Recent Build Times"
    echo "| Timestamp | Duration | Status | Type |"
    echo "|-----------|----------|--------|------|"
    tail -n "$DAYS" "$METRICS_DIR/build_metrics.csv" | while IFS=',' read -r timestamp duration status type; do
        MIN=$((duration / 60))
        SEC=$((duration % 60))
        echo "| $timestamp | ${MIN}m ${SEC}s | $status | $type |"
    done
    echo ""

    echo "### Average Build Time (Last $DAYS builds)"
    AVG=$(tail -n "$DAYS" "$METRICS_DIR/build_metrics.csv" | awk -F',' '$3=="success" {sum+=$2; count++} END {if(count>0) print sum/count; else print 0}')
    if [ -n "$AVG" ] && [ "$AVG" != "0" ]; then
        AVG_MIN=$(echo "$AVG / 60" | bc)
        AVG_SEC=$(echo "$AVG % 60" | bc)
        echo "**${AVG_MIN}m ${AVG_SEC}s**"
    else
        echo "**N/A** (no successful builds)"
    fi
    echo ""
fi

# Test metrics
if [ -f "$METRICS_DIR/test_metrics.csv" ]; then
    echo "## Test Execution Analysis"
    echo ""
    echo "### Recent Test Times"
    echo "| Timestamp | Duration | Status | Type |"
    echo "|-----------|----------|--------|------|"
    tail -n "$DAYS" "$METRICS_DIR/test_metrics.csv" | while IFS=',' read -r timestamp duration status type; do
        MIN=$((duration / 60))
        SEC=$((duration % 60))
        echo "| $timestamp | ${MIN}m ${SEC}s | $status | $type |"
    done
    echo ""

    echo "### Average Test Time by Type"
    for test_type in unit integration; do
        AVG=$(tail -n "$DAYS" "$METRICS_DIR/test_metrics.csv" | awk -F',' -v type="$test_type" '$4==type && $3=="success" {sum+=$2; count++} END {if(count>0) print sum/count; else print 0}')
        if [ -n "$AVG" ] && [ "$AVG" != "0" ]; then
            AVG_MIN=$(echo "$AVG / 60" | bc)
            AVG_SEC=$(echo "$AVG % 60" | bc)
            echo "- **${test_type}:** ${AVG_MIN}m ${AVG_SEC}s"
        fi
    done
    echo ""
fi

# Cache hit rate
if [ -f "$METRICS_DIR/cache_hits.csv" ]; then
    echo "## Cache Performance"
    echo ""
    TOTAL=$(tail -n "$DAYS" "$METRICS_DIR/cache_hits.csv" | wc -l)
    HITS=$(tail -n "$DAYS" "$METRICS_DIR/cache_hits.csv" | grep -c "true" || echo 0)
    if [ "$TOTAL" -gt 0 ]; then
        HIT_RATE=$(echo "scale=1; $HITS * 100 / $TOTAL" | bc)
        echo "- **Cache Hit Rate:** ${HIT_RATE}% ($HITS/$TOTAL)"
    else
        echo "- **Cache Hit Rate:** N/A (no data)"
    fi
    echo ""
fi

# Resource usage (latest)
if [ -f "$METRICS_DIR/resource_usage.log" ]; then
    echo "## Resource Usage (Latest)"
    echo ""
    echo '```'
    tail -n 20 "$METRICS_DIR/resource_usage.log"
    echo '```'
    echo ""
fi

# Performance trends
echo "## Performance Trends"
echo ""
if [ -f "$METRICS_DIR/build_metrics.csv" ]; then
    FIRST_BUILD=$(head -n 1 "$METRICS_DIR/build_metrics.csv" | cut -d',' -f2)
    LAST_BUILD=$(tail -n 1 "$METRICS_DIR/build_metrics.csv" | cut -d',' -f2)

    if [ -n "$FIRST_BUILD" ] && [ -n "$LAST_BUILD" ] && [ "$FIRST_BUILD" -gt 0 ]; then
        CHANGE=$(echo "scale=1; (($LAST_BUILD - $FIRST_BUILD) * 100) / $FIRST_BUILD" | bc)
        if [ "${CHANGE:0:1}" != "-" ]; then
            CHANGE="+$CHANGE"
        fi
        echo "- **Build time trend:** ${CHANGE}% vs baseline"
    fi
fi
echo ""

echo "## Recommendations"
echo ""
echo "Based on the metrics:"
echo "1. Monitor cache hit rate (target: >80%)"
echo "2. Investigate builds >30 minutes"
echo "3. Optimize tests taking >15 minutes"
echo "4. Track resource usage spikes"
echo ""

echo "---"
echo "Report generated by: scripts/generate_metrics_report.sh"
