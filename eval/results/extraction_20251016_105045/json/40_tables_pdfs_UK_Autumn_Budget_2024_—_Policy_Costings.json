warning: associated functions `extract_list_items` and `extract_inline_content` are never used
   --> crates/riptide-extraction/src/enhanced_extractor.rs:234:8
    |
 13 | impl StructuredExtractor {
    | ------------------------ associated functions in this implementation
...
234 |     fn extract_list_items(element: ElementRef, ordered: bool) -> String {
    |        ^^^^^^^^^^^^^^^^^^
...
325 |     fn extract_inline_content(element: ElementRef) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `riptide-extraction` (lib) generated 1 warning
warning: unused import: `Context`
  --> crates/riptide-cli/src/cache/manager.rs:10:14
   |
10 | use anyhow::{Context, Result};
   |              ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Context`
  --> crates/riptide-cli/src/cache/mod.rs:18:14
   |
18 | use anyhow::{Context, Result};
   |              ^^^^^^^

warning: unused import: `tokio::sync::RwLock`
  --> crates/riptide-cli/src/cache/mod.rs:20:5
   |
20 | use tokio::sync::RwLock;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `CacheConfig`
 --> crates/riptide-cli/src/commands/cache.rs:1:27
  |
1 | use crate::cache::{Cache, CacheConfig, WarmOptions};
  |                           ^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> crates/riptide-cli/src/commands/cache.rs:6:5
  |
6 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `Context`
 --> crates/riptide-cli/src/commands/job_local.rs:4:14
  |
4 | use anyhow::{Context, Result};
  |              ^^^^^^^

warning: unused import: `std::time::Duration`
   --> crates/riptide-cli/src/metrics/mod.rs:252:9
    |
252 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `overall_start`
  --> crates/riptide-cli/src/commands/crawl.rs:39:9
   |
39 |     let overall_start = Instant::now();
   |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_overall_start`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `overall_start`
   --> crates/riptide-cli/src/commands/render.rs:216:9
    |
216 |     let overall_start = Instant::now();
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_overall_start`

warning: field `config` is never read
  --> crates/riptide-cli/src/metrics/mod.rs:84:5
   |
73 | pub struct MetricsManager {
   |            -------------- field in this struct
...
84 |     config: MetricsStorageConfig,
   |     ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `riptide-cli` (lib) generated 10 warnings (run `cargo fix --lib -p riptide-cli` to apply 7 suggestions)
warning: unused import: `storage::JobStorage`
  --> crates/riptide-cli/src/job/mod.rs:10:9
   |
10 | pub use storage::JobStorage;
   |         ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `JobId`, `JobProgress`, and `LogEntry`
  --> crates/riptide-cli/src/job/mod.rs:11:22
   |
11 | pub use types::{Job, JobId, JobPriority, JobProgress, JobStatus, LogEntry, LogLevel};
   |                      ^^^^^               ^^^^^^^^^^^             ^^^^^^^^

warning: unused imports: `BrowserStorageState` and `SessionMetadata`
 --> crates/riptide-cli/src/session/mod.rs:5:17
  |
5 | pub use types::{BrowserStorageState, Cookie, Session, SessionMetadata};
  |                 ^^^^^^^^^^^^^^^^^^^                   ^^^^^^^^^^^^^^^

warning: methods `remove`, `list_domain_urls`, `manager`, and `storage` are never used
   --> crates/riptide-cli/src/cache/mod.rs:82:18
    |
 34 | impl Cache {
    | ---------- methods in this implementation
...
 82 |     pub async fn remove(&self, url: &str) -> Result<bool> {
    |                  ^^^^^^
...
125 |     pub async fn list_domain_urls(&self, domain: &str) -> Result<Vec<String>> {
    |                  ^^^^^^^^^^^^^^^^
...
252 |     pub fn manager(&self) -> &Arc<CacheManager> {
    |            ^^^^^^^
...
257 |     pub fn storage(&self) -> &Arc<CacheStorage> {
    |            ^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated items `new`, `remove`, `list_domain_urls`, and `config` are never used
   --> crates/riptide-cli/src/cache/manager.rs:29:12
    |
 27 | impl CacheManager {
    | ----------------- associated items in this implementation
 28 |     /// Create new cache manager with default configuration
 29 |     pub fn new() -> Result<Self> {
    |            ^^^
...
 89 |     pub async fn remove(&self, url: &str) -> Result<bool> {
    |                  ^^^^^^
...
146 |     pub async fn list_domain_urls(&self, domain: &str) -> Result<Vec<String>> {
    |                  ^^^^^^^^^^^^^^^^
...
220 |     pub fn config(&self) -> &CacheConfig {
    |            ^^^^^^

warning: methods `load_stats`, `cache_dir`, and `get_disk_usage` are never used
   --> crates/riptide-cli/src/cache/storage.rs:75:18
    |
 22 | impl CacheStorage {
    | ----------------- methods in this implementation
...
 75 |     pub async fn load_stats(&self) -> Result<Option<CacheStats>> {
    |                  ^^^^^^^^^^
...
122 |     pub fn cache_dir(&self) -> &Path {
    |            ^^^^^^^^^
...
127 |     pub async fn get_disk_usage(&self) -> Result<u64> {
    |                  ^^^^^^^^^^^^^^

warning: methods `age_seconds` and `idle_seconds` are never used
   --> crates/riptide-cli/src/cache/types.rs:106:12
    |
 58 | impl CacheEntry {
    | --------------- methods in this implementation
...
106 |     pub fn age_seconds(&self) -> i64 {
    |            ^^^^^^^^^^^
...
111 |     pub fn idle_seconds(&self) -> i64 {
    |            ^^^^^^^^^^^^

warning: method `miss_rate` is never used
   --> crates/riptide-cli/src/cache/types.rs:174:12
    |
148 | impl CacheStats {
    | --------------- method in this implementation
...
174 |     pub fn miss_rate(&self) -> f64 {
    |            ^^^^^^^^^

warning: multiple methods are never used
   --> crates/riptide-cli/src/job/manager.rs:129:18
    |
 16 | impl JobManager {
    | --------------- methods in this implementation
...
129 |     pub async fn start_job(&self, job_id: &JobId) -> Result<()> {
    |                  ^^^^^^^^^
...
141 |     pub async fn update_progress(
    |                  ^^^^^^^^^^^^^^^
...
162 |     pub async fn complete_job(&self, job_id: &JobId) -> Result<()> {
    |                  ^^^^^^^^^^^^
...
185 |     pub async fn fail_job(&self, job_id: &JobId, error: String) -> Result<()> {
    |                  ^^^^^^^^
...
222 |     pub async fn delete_job(&self, job_id: &JobId) -> Result<()> {
    |                  ^^^^^^^^^^
...
249 |     pub async fn log_job_url(
    |                  ^^^^^^^^^^^
...
272 |     pub async fn save_results(&self, job_id: &JobId, results: &serde_json::Value) -> Result<()> {
    |                  ^^^^^^^^^^^^

warning: methods `save_results` and `base_dir` are never used
   --> crates/riptide-cli/src/job/storage.rs:176:12
    |
 13 | impl JobStorage {
    | --------------- methods in this implementation
...
176 |     pub fn save_results(&self, job_id: &JobId, results: &serde_json::Value) -> Result<()> {
    |            ^^^^^^^^^^^^
...
204 |     pub fn base_dir(&self) -> &Path {
    |            ^^^^^^^^

warning: methods `update`, `increment_completed`, `increment_failed`, `set_current`, and `clear_current` are never used
   --> crates/riptide-cli/src/job/types.rs:151:12
    |
138 | impl JobProgress {
    | ---------------- methods in this implementation
...
151 |     pub fn update(&mut self, completed: u32, failed: u32) {
    |            ^^^^^^
...
160 |     pub fn increment_completed(&mut self) {
    |            ^^^^^^^^^^^^^^^^^^^
...
166 |     pub fn increment_failed(&mut self) {
    |            ^^^^^^^^^^^^^^^^
...
172 |     pub fn set_current(&mut self, item: String) {
    |            ^^^^^^^^^^^
...
177 |     pub fn clear_current(&mut self) {
    |            ^^^^^^^^^^^^^

warning: methods `start`, `complete`, `fail`, and `update_progress` are never used
   --> crates/riptide-cli/src/job/types.rs:251:12
    |
219 | impl Job {
    | -------- methods in this implementation
...
251 |     pub fn start(&mut self) {
    |            ^^^^^
...
258 |     pub fn complete(&mut self) {
    |            ^^^^^^^^
...
265 |     pub fn fail(&mut self, error: String) {
    |            ^^^^
...
280 |     pub fn update_progress(&mut self, completed: u32, failed: u32) {
    |            ^^^^^^^^^^^^^^^

warning: associated function `with_url` is never used
   --> crates/riptide-cli/src/job/types.rs:338:12
    |
326 | impl LogEntry {
    | ------------- associated function in this implementation
...
338 |     pub fn with_url(level: LogLevel, message: String, url: String) -> Self {
    |            ^^^^^^^^

warning: fields `aggregator` and `config` are never read
  --> crates/riptide-cli/src/metrics/mod.rs:81:5
   |
73 | pub struct MetricsManager {
   |            -------------- fields in this struct
...
81 |     aggregator: Arc<RwLock<MetricsAggregator>>,
   |     ^^^^^^^^^^
...
84 |     config: MetricsStorageConfig,
   |     ^^^^^^

warning: methods `get_aggregates`, `get_counter`, `increment_counter`, `record_metric`, `storage`, and `aggregator` are never used
   --> crates/riptide-cli/src/metrics/mod.rs:164:18
    |
 87 | impl MetricsManager {
    | ------------------- methods in this implementation
...
164 |     pub async fn get_aggregates(
    |                  ^^^^^^^^^^^^^^
...
187 |     pub fn get_counter(&self, name: &str) -> Result<u64> {
    |            ^^^^^^^^^^^
...
192 |     pub fn increment_counter(&self, name: &str) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^
...
197 |     pub fn record_metric(&self, metric_name: &str, value: f64) -> Result<()> {
    |            ^^^^^^^^^^^^^
...
207 |     pub fn storage(&self) -> &Arc<RwLock<MetricsStorage>> {
    |            ^^^^^^^
...
212 |     pub fn aggregator(&self) -> &Arc<RwLock<MetricsAggregator>> {
    |            ^^^^^^^^^^

warning: field `percentile_cache` is never read
  --> crates/riptide-cli/src/metrics/aggregator.rs:12:5
   |
10 | pub struct MetricsAggregator {
   |            ----------------- field in this struct
11 |     /// Cached percentile calculations
12 |     percentile_cache: HashMap<String, PercentileCache>,
   |     ^^^^^^^^^^^^^^^^

warning: fields `durations`, `p50`, `p95`, `p99`, and `last_updated` are never read
  --> crates/riptide-cli/src/metrics/aggregator.rs:17:5
   |
16 | struct PercentileCache {
   |        --------------- fields in this struct
17 |     durations: Vec<f64>,
   |     ^^^^^^^^^
18 |     p50: f64,
   |     ^^^
19 |     p95: f64,
   |     ^^^
20 |     p99: f64,
   |     ^^^
21 |     last_updated: std::time::Instant,
   |     ^^^^^^^^^^^^
   |
   = note: `PercentileCache` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: multiple methods are never used
   --> crates/riptide-cli/src/metrics/aggregator.rs:33:12
    |
 24 | impl MetricsAggregator {
    | ---------------------- methods in this implementation
...
 33 |     pub fn aggregate_by_command(
    |            ^^^^^^^^^^^^^^^^^^^^
...
 60 |     fn update_aggregate(&mut self, agg: &mut CommandAggregates, metric: &CommandMetrics) {
    |        ^^^^^^^^^^^^^^^^
...
103 |     fn add_duration_to_cache(&mut self, command: &str, duration: f64) {
    |        ^^^^^^^^^^^^^^^^^^^^^
...
136 |     pub fn calculate_metric_percentiles(&self, points: &[MetricPoint]) -> (f64, f64, f64) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
142 |     pub fn calculate_moving_average(&self, points: &[MetricPoint], window_size: usize) -> Vec<f64> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
...
166 |     pub fn detect_anomalies(&self, points: &[MetricPoint], threshold: f64) -> Vec<usize> {
    |            ^^^^^^^^^^^^^^^^
...
189 |     pub fn calculate_rate_of_change(&self, points: &[MetricPoint]) -> Vec<f64> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
...
217 |     pub fn group_by_time_bucket(
    |            ^^^^^^^^^^^^^^^^^^^^

warning: function `calculate_percentiles` is never used
   --> crates/riptide-cli/src/metrics/aggregator.rs:248:4
    |
248 | fn calculate_percentiles(values: &[f64]) -> (f64, f64, f64) {
    |    ^^^^^^^^^^^^^^^^^^^^^

warning: function `percentile` is never used
   --> crates/riptide-cli/src/metrics/aggregator.rs:264:4
    |
264 | fn percentile(sorted_values: &[f64], p: f64) -> f64 {
    |    ^^^^^^^^^^

warning: function `update_running_avg` is never used
   --> crates/riptide-cli/src/metrics/aggregator.rs:274:4
    |
274 | fn update_running_avg(current: &mut f64, new_value: f64, count: u64) {
    |    ^^^^^^^^^^^^^^^^^^

warning: field `start_time` is never read
  --> crates/riptide-cli/src/metrics/collector.rs:24:5
   |
13 | pub struct MetricsCollector {
   |            ---------------- field in this struct
...
24 |     start_time: Instant,
   |     ^^^^^^^^^^

warning: methods `increment_counter_by`, `get_counter`, `get_all_counters`, `get_metric_series`, `active_command_count`, and `uptime` are never used
   --> crates/riptide-cli/src/metrics/collector.rs:215:12
    |
 84 | impl MetricsCollector {
    | --------------------- methods in this implementation
...
215 |     pub fn increment_counter_by(&self, name: &str, amount: u64) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
230 |     pub fn get_counter(&self, name: &str) -> Result<u64> {
    |            ^^^^^^^^^^^
...
262 |     pub fn get_all_counters(&self) -> Result<HashMap<String, u64>> {
    |            ^^^^^^^^^^^^^^^^
...
272 |     pub fn get_metric_series(&self, metric_name: &str) -> Result<Vec<MetricPoint>> {
    |            ^^^^^^^^^^^^^^^^^
...
282 |     pub fn active_command_count(&self) -> Result<usize> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
292 |     pub fn uptime(&self) -> Duration {
    |            ^^^^^^

warning: methods `get_command_history`, `get_commands_by_name`, and `clear` are never used
   --> crates/riptide-cli/src/metrics/storage.rs:233:12
    |
 31 | impl MetricsStorage {
    | ------------------- methods in this implementation
...
233 |     pub fn get_command_history(&self) -> &[CommandMetrics] {
    |            ^^^^^^^^^^^^^^^^^^^
...
245 |     pub fn get_commands_by_name(&self, command_name: &str) -> Vec<CommandMetrics> {
    |            ^^^^^^^^^^^^^^^^^^^^
...
259 |     pub fn clear(&mut self) -> Result<()> {
    |            ^^^^^

warning: method `add_metadata` is never used
  --> crates/riptide-cli/src/metrics/types.rs:84:12
   |
52 | impl CommandMetrics {
   | ------------------- method in this implementation
...
84 |     pub fn add_metadata(&mut self, key: impl Into<String>, value: impl Into<String>) {
   |            ^^^^^^^^^^^^

warning: method `error_rate` is never used
   --> crates/riptide-cli/src/metrics/types.rs:171:12
    |
140 | impl CommandAggregates {
    | ---------------------- method in this implementation
...
171 |     pub fn error_rate(&self) -> f64 {
    |            ^^^^^^^^^^

warning: associated function `with_labels` is never used
   --> crates/riptide-cli/src/metrics/types.rs:255:12
    |
244 | impl MetricPoint {
    | ---------------- associated function in this implementation
...
255 |     pub fn with_labels(value: f64, labels: HashMap<String, String>) -> Self {
    |            ^^^^^^^^^^^

warning: methods `inc_by` and `reset` are never used
   --> crates/riptide-cli/src/metrics/types.rs:295:12
    |
278 | impl Counter {
    | ------------ methods in this implementation
...
295 |     pub fn inc_by(&mut self, amount: u64) {
    |            ^^^^^^
...
301 |     pub fn reset(&mut self) {
    |            ^^^^^

warning: struct `Timer` is never constructed
   --> crates/riptide-cli/src/metrics/types.rs:309:12
    |
309 | pub struct Timer {
    |            ^^^^^

warning: associated items `new`, `record`, `avg_ms`, `percentile`, and `durations` are never used
   --> crates/riptide-cli/src/metrics/types.rs:322:12
    |
320 | impl Timer {
    | ---------- associated items in this implementation
321 |     /// Create and start new timer
322 |     pub fn new(name: impl Into<String>) -> Self {
    |            ^^^
...
331 |     pub fn record(&mut self) -> Duration {
    |            ^^^^^^
...
339 |     pub fn avg_ms(&self) -> f64 {
    |            ^^^^^^
...
348 |     pub fn percentile(&self, p: f64) -> f64 {
    |            ^^^^^^^^^^
...
359 |     pub fn durations(&self) -> &[u64] {
    |            ^^^^^^^^^

warning: function `record_to_telemetry` is never used
   --> crates/riptide-cli/src/metrics/mod.rs:255:18
    |
255 |     pub async fn record_to_telemetry(
    |                  ^^^^^^^^^^^^^^^^^^^

warning: function `to_otel_attributes` is never used
   --> crates/riptide-cli/src/metrics/mod.rs:276:12
    |
276 |     pub fn to_otel_attributes(metrics: &CommandMetrics) -> Vec<opentelemetry::KeyValue> {
    |            ^^^^^^^^^^^^^^^^^^

warning: function `get_current_session` is never used
  --> crates/riptide-cli/src/session/mod.rs:10:8
   |
10 | pub fn get_current_session() -> Result<Option<Session>> {
   |        ^^^^^^^^^^^^^^^^^^^

warning: function `get_session_by_name` is never used
  --> crates/riptide-cli/src/session/mod.rs:16:8
   |
16 | pub fn get_session_by_name(name: &str) -> Result<Session> {
   |        ^^^^^^^^^^^^^^^^^^^

warning: function `use_session` is never used
  --> crates/riptide-cli/src/session/mod.rs:22:8
   |
22 | pub fn use_session(name: &str) -> Result<Session> {
   |        ^^^^^^^^^^^

warning: associated function `sessions_dir` is never used
  --> crates/riptide-cli/src/session/manager.rs:59:12
   |
15 | impl SessionManager {
   | ------------------- associated function in this implementation
...
59 |     pub fn sessions_dir() -> Result<PathBuf> {
   |            ^^^^^^^^^^^^

warning: associated items `is_expired`, `mark_used`, `to_cookie_jar`, and `from_cookie_jar` are never used
   --> crates/riptide-cli/src/session/types.rs:98:12
    |
 73 | impl Session {
    | ------------ associated items in this implementation
...
 98 |     pub fn is_expired(&self) -> bool {
    |            ^^^^^^^^^^
...
112 |     pub fn mark_used(&mut self) {
    |            ^^^^^^^^^
...
118 |     pub fn to_cookie_jar(&self) -> Vec<Cookie> {
    |            ^^^^^^^^^^^^^
...
123 |     pub fn from_cookie_jar(name: String, cookies: Vec<Cookie>) -> Self {
    |            ^^^^^^^^^^^^^^^

warning: associated function `skipped` is never used
  --> crates/riptide-cli/src/validation/types.rs:55:12
   |
20 | impl CheckResult {
   | ---------------- associated function in this implementation
...
55 |     pub fn skipped(name: impl Into<String>, message: impl Into<String>) -> Self {
   |            ^^^^^^^

warning: `riptide-cli` (bin "riptide") generated 47 warnings (9 duplicates) (run `cargo fix --bin "riptide"` to apply 3 suggestions)
    Finished `release` profile [optimized] target(s) in 0.41s
     Running `target/x86_64-unknown-linux-gnu/release/riptide extract --url 'https://assets.publishing.service.gov.uk/media/6721d2c54da1c0d41942a8d2/Policy_Costing_Document_-_Autumn_Budget_2024.pdf' --engine raw --local`

thread 'main' panicked at crates/riptide-cli/src/metrics/mod.rs:70:49:
Failed to initialize metrics manager: Failed to deserialize metrics

Caused by:
    missing field `metadata` at line 21 column 5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
