Test_ID,Test_Category,Test_Description,Method,Endpoint,Parameters,Expected_Result,Actual_Result,Status,Issues,Notes
ST001,Basic_Functionality,CLI help command,CLI,N/A,--help,Display help text,Help displayed successfully,PASS,None,Shows --query parameter in CLI
ST002,Basic_Functionality,API search with correct parameter,GET,/api/v1/search,q=rust+programming&limit=3,Return search results,Results returned successfully,PASS,None,API expects 'q' parameter
ST003,Basic_Functionality,API search with root alias,GET,/search,q=web+scraping&limit=5,Return search results,Results returned successfully,PASS,None,Both /search and /api/v1/search work
ST004,Basic_Functionality,API search with all parameters,GET,/api/v1/search,q=testing&limit=2&country=uk&language=en,Return localized results,Results returned successfully,PASS,None,Supports country and language parameters
ST005,Parameter_Validation,CLI uses wrong parameter name,CLI,/api/v1/search,--query (maps to query=),API accepts request,400 Bad Request - missing field 'q',FAIL,CRITICAL: Parameter mismatch,CLI uses --query but API expects q
ST006,Parameter_Validation,Empty query parameter,GET,/api/v1/search,q=,Error response,400 Bad Request - query cannot be empty,PASS,None,Proper validation
ST007,Parameter_Validation,Missing query parameter,GET,/api/v1/search,None,Error response,400 Bad Request - missing field 'q',PASS,None,Proper validation
ST008,Parameter_Validation,Query with wrong parameter name,GET,/api/v1/search,query=test,Error response,400 Bad Request - missing field 'q',PASS,None,Confirms API expects 'q' not 'query'
ST009,Security,SQL injection attempt,GET,/api/v1/search,q=test'+OR+'1'='1&limit=5,Sanitized query,Query treated as literal string,PASS,None,SQL injection properly handled
ST010,Security,XSS attempt,GET,/api/v1/search,q=<script>alert('xss')</script>&limit=5,Sanitized query,Query treated as literal string,PASS,None,XSS attempt properly handled
ST011,Boundary_Values,Large limit value,GET,/api/v1/search,q=test&limit=999,Results within reasonable bounds,Returns results without error,PASS,None,No hard limit enforcement visible
ST012,Search_Provider,None provider response,GET,/api/v1/search,q=test&limit=5,Mock results from none provider,Returns mock result with provider_used=none,PASS,None,Using none provider (mock)
ST013,Response_Format,JSON response structure,GET,/api/v1/search,q=test&limit=5,Valid JSON with required fields,Contains query results total_results provider_used search_time_ms,PASS,None,All expected fields present
ST014,Response_Format,Result object structure,GET,/api/v1/search,q=test&limit=5,Results contain title url snippet position,Results contain all required fields,PASS,None,Result structure is correct
ST015,Performance,Response time,GET,/api/v1/search,q=test&limit=5,Response < 100ms for mock,search_time_ms: 0 (instant mock response),PASS,None,Mock provider is very fast
ST016,Endpoints,V1 endpoint availability,GET,/api/v1/search,q=test,200 OK,200 OK,PASS,None,Primary v1 endpoint works
ST017,Endpoints,Root endpoint availability,GET,/search,q=test,200 OK,200 OK,PASS,None,Backward compatibility alias works
ST018,CLI_Integration,CLI binary location,CLI,N/A,search --help,Help text displayed,Located at target/x86_64-unknown-linux-gnu/release/riptide,PASS,None,Platform-specific binary path
ST019,CLI_Integration,CLI to API parameter mapping,CLI,/api/v1/search,--query=test,API request with q parameter,CLI sends query= parameter but API expects q=,FAIL,CRITICAL: Breaks CLI-API integration,Root cause identified in search.rs:28
ST020,Error_Messages,Missing field error clarity,GET,/api/v1/search,query=test,Clear error message,Failed to deserialize query string: missing field 'q',PASS,None,Error message is clear
ST021,Provider_Detection,Provider used field,GET,/api/v1/search,q=test,Provider identification in response,provider_used: none,PASS,None,Shows which search provider was used
ST022,Localization,Country parameter,GET,/api/v1/search,q=test&country=uk,Accepts country parameter,Request processed successfully,PASS,None,Default is 'us'
ST023,Localization,Language parameter,GET,/api/v1/search,q=test&language=en,Accepts language parameter,Request processed successfully,PASS,None,Default is 'en'
ST024,Search_Quality,Result relevance,GET,/api/v1/search,q=rust+programming,Relevant results,Mock provider returns placeholder results,SKIP,None,Cannot test with none provider
ST025,Search_Quality,Result count accuracy,GET,/api/v1/search,q=test&limit=5,Returns up to 5 results,Returns 1 result (mock data),PASS,None,Mock provider has limited results

Summary:
- Total Tests: 25
- Passed: 22
- Failed: 2
- Skipped: 1
- Critical Issues: 2 (both related to CLI-API parameter mismatch)

Critical Findings:
1. CLI uses --query parameter which sends 'query=' to API
2. API expects 'q=' parameter (defined in SearchQuery struct)
3. This causes all CLI search commands to fail with 400 Bad Request
4. Fix required in /workspaces/eventmesh/crates/riptide-cli/src/commands/search.rs line 28

Recommendations:
1. Change CLI to send 'q' parameter instead of 'query' in search.rs:28
2. OR change API to accept 'query' parameter instead of 'q' in handlers/search.rs:20
3. Recommended: Change CLI to match API (less breaking change)
4. Add integration tests to catch parameter mismatches
5. Consider adding API parameter aliases for backward compatibility

Search Functionality Status:
- API endpoints: WORKING (both /api/v1/search and /search)
- API validation: WORKING (empty query, missing parameters)
- API security: WORKING (SQL injection, XSS protection)
- API response format: WORKING (correct JSON structure)
- CLI binary: AVAILABLE and WORKING
- CLI-API integration: BROKEN (parameter mismatch)
- Search provider: WORKING (using 'none' mock provider)
- Localization: WORKING (country and language parameters)

Provider Information:
- Current provider: 'none' (mock/placeholder)
- Returns mock results for testing
- Real search providers need configuration
- See riptide-search crate for provider options
