package riptide:extractor@0.2.0;

interface extract {
    /// Content extraction modes
    variant extraction-mode {
        article,
        full,
        metadata,
        custom(list<string>),
    }

    /// Extraction result with metadata
    record extracted-content {
        url: string,
        title: option<string>,
        byline: option<string>,
        published-iso: option<string>,
        markdown: string,
        text: string,
        links: list<string>,
        media: list<string>,
        language: option<string>,
        reading-time: option<u32>,
        quality-score: option<u8>,
        word-count: option<u32>,
        categories: list<string>,
        site-name: option<string>,
        description: option<string>,
    }

    /// Error types for extraction
    variant extraction-error {
        invalid-html(string),
        network-error(string),
        parse-error(string),
        resource-limit(string),
        extractor-error(string),
        internal-error(string),
        unsupported-mode(string),
    }

    /// Component health status
    record health-status {
        status: string,
        version: string,
        extractor-version: string,
        capabilities: list<string>,
        memory-usage: option<u64>,
        extraction-count: option<u64>,
    }

    /// Component information
    record component-info {
        name: string,
        version: string,
        component-model-version: string,
        features: list<string>,
        supported-modes: list<string>,
        build-timestamp: option<string>,
        git-commit: option<string>,
    }

    /// Extraction statistics
    record extraction-stats {
        processing-time-ms: u64,
        memory-used: u64,
        nodes-processed: option<u32>,
        links-found: u32,
        images-found: u32,
    }

    /// Extract content from HTML
    extract: func(
        html: string,
        url: string,
        mode: extraction-mode
    ) -> result<extracted-content, extraction-error>;

    /// Extract with statistics
    extract-with-stats: func(
        html: string,
        url: string,
        mode: extraction-mode
    ) -> result<tuple<extracted-content, extraction-stats>, extraction-error>;

    /// Validate HTML
    validate-html: func(html: string) -> result<bool, extraction-error>;

    /// Health check
    health-check: func() -> health-status;

    /// Get component info
    get-info: func() -> component-info;

    /// Reset state
    reset-state: func() -> result<string, extraction-error>;

    /// Get supported modes
    get-modes: func() -> list<string>;
}

/// Main extractor world
world extractor {
    export extract;
}