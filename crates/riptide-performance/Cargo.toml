[package]
name = "riptide-performance"
version = "0.1.0"
edition.workspace = true
license.workspace = true
authors.workspace = true

[dependencies]
# Core async runtime
tokio = { workspace = true, features = ["full"] }
tokio-metrics = "0.3"
tokio-stream = { workspace = true }
futures = { workspace = true }

# Error handling and serialization
anyhow = { workspace = true }
thiserror = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
toml = "0.8"

# Time and UUID
chrono = { workspace = true }
uuid = { workspace = true }

# System monitoring
sysinfo = { workspace = true }
psutil = { workspace = true }

# Memory profiling and analysis
# Using tikv-jemalloc-ctl to match tikv-jemallocator used in riptide-api
tikv-jemalloc-ctl = { version = "0.5", optional = true }
# pprof without flamegraph to avoid CDDL-1.0 license (inferno dependency)
# Use protobuf-codec for profiling output; flamegraph feature removed for CI compliance
pprof = { version = "0.15", default-features = false, features = ["protobuf-codec"], optional = true }
memory-stats = { version = "1.2", optional = true }

# Performance measurement
criterion = { version = "0.5", features = ["html_reports"], optional = true }
iai = "0.1"
# flamegraph removed from default features to avoid CDDL-1.0 license (inferno dependency)
# Keep as optional for local development only (not in CI)
flamegraph = { version = "0.6", optional = true }

# Observability
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
opentelemetry = { workspace = true }
opentelemetry-otlp = { workspace = true }
opentelemetry_sdk = { workspace = true }
opentelemetry-semantic-conventions = { workspace = true }
tracing-opentelemetry = { workspace = true }

# HTTP and metrics
reqwest = { workspace = true }
hyper = { workspace = true }
axum = { workspace = true }
tower = { workspace = true }
tower-http = { workspace = true }

# Caching and storage
redis = { workspace = true, optional = true }
moka = { version = "0.12", features = ["future"], optional = true }

# Async utilities
async-trait = { workspace = true }
pin-project-lite = "0.2"

# Resource management
governor = { version = "0.6", optional = true }
# tower-limit removed due to old tokio 0.2.25 dependency (RUSTSEC-2025-0023)
# Using governor for rate limiting instead

# Internal dependencies
riptide-core = { path = "../riptide-core" }

# Random number generation for simulation
rand = "0.8"

[dev-dependencies]
tempfile = { workspace = true }
tokio-test = "0.4"

[features]
# Default features exclude flamegraph to avoid CDDL-1.0 license in CI
# Use 'bottleneck-analysis-full' feature for local development with flamegraph
default = ["memory-profiling", "cache-optimization", "resource-limits"]

# Core feature groups
memory-profiling = ["pprof", "memory-stats"]  # tikv-jemalloc-ctl removed due to conflicts
bottleneck-analysis = ["criterion"]  # flamegraph removed from default
bottleneck-analysis-full = ["bottleneck-analysis", "flamegraph"]  # Dev-only: includes flamegraph
cache-optimization = ["moka", "redis"]
resource-limits = ["governor"]  # tower-limit removed due to security advisory

# Allocator features
jemalloc = []  # Feature flag only, actual allocator in riptide-api

# Environment-specific feature sets
# Production excludes flamegraph for license compliance
production = ["jemalloc", "memory-profiling", "bottleneck-analysis", "cache-optimization", "resource-limits"]
# Development can use full bottleneck analysis with flamegraph locally
development = ["jemalloc", "memory-profiling", "bottleneck-analysis-full", "cache-optimization"]

[lib]
name = "riptide_performance"
path = "src/lib.rs"

# Benchmarks commented out until benchmark files are created
# [[bench]]
# name = "memory_benchmark"
# harness = false

# [[bench]]
# name = "bottleneck_benchmark"
# harness = false

# [[bench]]
# name = "cache_benchmark"
# harness = false