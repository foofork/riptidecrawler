warning: field `status` is never read
   --> crates/riptide-streaming/tests/ndjson_stream_tests.rs:228:5
    |
225 | struct StreamingResponse {
    |        ----------------- field in this struct
...
228 |     status: StatusCode,
    |     ^^^^^^
    |
    = note: `StreamingResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: variants `TTFBTimeout` and `Performance` are never constructed
   --> crates/riptide-streaming/tests/ndjson_stream_tests.rs:307:5
    |
302 | enum TestError {
    |      --------- variants in this enum
...
307 |     TTFBTimeout(Duration),
    |     ^^^^^^^^^^^
308 |     Performance(String),
    |     ^^^^^^^^^^^
    |
    = note: `TestError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `riptide-streaming` (test "ndjson_stream_tests") generated 2 warnings
warning: unused variable: `chunk`
   --> crates/riptide-streaming/tests/streaming_tests.rs:326:33
    |
326 |             .returning(move |_, chunk| {
    |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_chunk`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> crates/riptide-streaming/tests/streaming_tests.rs:498:21
    |
498 |                 let mut streaming = streaming_arc.lock().await;
    |                     ----^^^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: field `duration` is never read
  --> crates/riptide-streaming/tests/streaming_tests.rs:68:13
   |
65 |     pub struct StreamStats {
   |                ----------- field in this struct
...
68 |         pub duration: Duration,
   |             ^^^^^^^^
   |
   = note: `StreamStats` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: unused import: `futures::stream::TryStreamExt`
 --> crates/riptide-streaming/tests/test_streaming.rs:2:5
  |
2 | use futures::stream::TryStreamExt;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: variable `successful_results` is assigned to, but never used
   --> crates/riptide-streaming/tests/test_streaming.rs:121:13
    |
121 |     let mut successful_results = 0;
    |             ^^^^^^^^^^^^^^^^^^
    |
    = note: consider using `_successful_results` instead
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `first_result_time`
   --> crates/riptide-streaming/tests/test_streaming.rs:467:13
    |
467 |         let first_result_time = start_time.elapsed();
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_first_result_time`

warning: unused variable: `i`
   --> crates/riptide-streaming/tests/deepsearch_stream_tests.rs:343:10
    |
343 |     for (i, result) in search_results.iter().enumerate() {
    |          ^ help: if this is intentional, prefix it with an underscore: `_i`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: field `status` is never read
   --> crates/riptide-streaming/tests/deepsearch_stream_tests.rs:229:5
    |
226 | struct DeepSearchStreamingResponse {
    |        --------------------------- field in this struct
...
229 |     status: reqwest::StatusCode,
    |     ^^^^^^
    |
    = note: `DeepSearchStreamingResponse` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: hiding a lifetime that's elided elsewhere is confusing
  --> crates/riptide-streaming/tests/deepsearch_stream_tests.rs:43:26
   |
43 |     fn setup_serper_mock(&self, query: &str, results: Vec<SearchResultData>) -> Mock {
   |                          ^^^^^ the lifetime is elided here                      ---- the same lifetime is hidden here
   |
   = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
   = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default
help: use `'_` for type paths
   |
43 |     fn setup_serper_mock(&self, query: &str, results: Vec<SearchResultData>) -> Mock<'_> {
   |                                                                                     ++++

warning: hiding a lifetime that's elided elsewhere is confusing
  --> crates/riptide-streaming/tests/deepsearch_stream_tests.rs:73:28
   |
73 |     fn setup_content_mocks(&self, urls: &[&str]) -> Vec<Mock> {
   |                            ^^^^^                        ---- the same lifetime is hidden here
   |                            |
   |                            the lifetime is elided here
   |
   = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
   |
73 |     fn setup_content_mocks(&self, urls: &[&str]) -> Vec<Mock<'_>> {
   |                                                             ++++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/riptide-streaming/tests/deepsearch_stream_tests.rs:103:36
    |
103 |     fn setup_failing_content_mocks(&self, urls: &[&str]) -> Vec<Mock> {
    |                                    ^^^^^                        ---- the same lifetime is hidden here
    |                                    |
    |                                    the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
103 |     fn setup_failing_content_mocks(&self, urls: &[&str]) -> Vec<Mock<'_>> {
    |                                                                     ++++

warning: `riptide-streaming` (test "streaming_tests") generated 3 warnings (run `cargo fix --test "streaming_tests"` to apply 1 suggestion)
warning: `riptide-streaming` (test "test_streaming") generated 3 warnings (run `cargo fix --test "test_streaming"` to apply 1 suggestion)
warning: `riptide-streaming` (test "deepsearch_stream_tests") generated 5 warnings
   Compiling riptide-search v0.1.0 (/workspaces/eventmesh/crates/riptide-search)
warning: unused variable: `provider`
   --> crates/riptide-search/tests/advanced_search_config_test.rs:298:17
    |
298 |             let provider = create_search_provider(config).await;
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_provider`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `provider`
   --> crates/riptide-search/tests/advanced_search_config_test.rs:327:17
    |
327 |             let provider = create_search_provider(config).await;
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_provider`

warning: unused variable: `mock_response`
  --> crates/riptide-search/tests/serper_provider_test.rs:48:13
   |
48 |         let mock_response = json!({
   |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mock_response`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `error_response`
  --> crates/riptide-search/tests/serper_provider_test.rs:96:13
   |
96 |         let error_response = json!({
   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_error_response`

warning: unused variable: `rate_limit_response`
   --> crates/riptide-search/tests/serper_provider_test.rs:132:13
    |
132 |         let rate_limit_response = json!({
    |             ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_rate_limit_response`

warning: unused variable: `malformed_response`
   --> crates/riptide-search/tests/serper_provider_test.rs:169:13
    |
169 |         let malformed_response = "{ invalid json";
    |             ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_malformed_response`

warning: unused variable: `empty_response`
   --> crates/riptide-search/tests/serper_provider_test.rs:202:13
    |
202 |         let empty_response = json!({
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_empty_response`

warning: struct `MockHttpResponse` is never constructed
 --> crates/riptide-search/tests/serper_provider_test.rs:4:8
  |
4 | struct MockHttpResponse {
  |        ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: struct `MockHttpClient` is never constructed
 --> crates/riptide-search/tests/serper_provider_test.rs:9:8
  |
9 | struct MockHttpClient {
  |        ^^^^^^^^^^^^^^

warning: associated items `new` and `post` are never used
  --> crates/riptide-search/tests/serper_provider_test.rs:15:8
   |
14 | impl MockHttpClient {
   | ------------------- associated items in this implementation
15 |     fn new(responses: Vec<MockHttpResponse>) -> Self {
   |        ^^^
...
22 |     async fn post(&self, _url: &str, _body: String) -> Result<MockHttpResponse, String> {
   |              ^^^^

warning: constant `TEST_API_KEY` is never used
  --> crates/riptide-search/tests/serper_provider_test.rs:41:11
   |
41 |     const TEST_API_KEY: &str = "test_api_key_12345";
   |           ^^^^^^^^^^^^

warning: `riptide-search` (test "advanced_search_config_test") generated 2 warnings
warning: `riptide-search` (test "serper_provider_test") generated 9 warnings
warning: unused variable: `test_cases`
  --> crates/riptide-search/tests/none_provider_test.rs:10:13
   |
10 |         let test_cases = vec![
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_cases`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `test_cases`
  --> crates/riptide-search/tests/none_provider_test.rs:47:13
   |
47 |         let test_cases = vec![
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_cases`

warning: unused variable: `edge_cases`
  --> crates/riptide-search/tests/none_provider_test.rs:84:13
   |
84 |         let edge_cases = vec![
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_edge_cases`

warning: unused variable: `test_url`
   --> crates/riptide-search/tests/none_provider_test.rs:120:13
    |
120 |         let test_url = "https://eventmesh.apache.org/docs/introduction";
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_url`

warning: unused variable: `test_urls`
   --> crates/riptide-search/tests/none_provider_test.rs:149:13
    |
149 |         let test_urls = vec![
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_urls`

warning: unused variable: `health_result`
   --> crates/riptide-search/tests/provider_selection_test.rs:401:13
    |
401 |         let health_result = provider.health_check().await;
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_health_result`
    |
    = note: `#[warn(unused_variables)]` on by default

   Compiling riptide-api v0.1.0 (/workspaces/eventmesh/crates/riptide-api)
warning: `riptide-search` (test "none_provider_test") generated 5 warnings
warning: `riptide-search` (test "provider_selection_test") generated 1 warning
error[E0412]: cannot find type `Duration` in this scope
  --> crates/riptide-search/tests/search_provider_unit_test.rs:16:25
   |
16 |         response_delay: Duration,
   |                         ^^^^^^^^ not found in this scope
   |
help: consider importing one of these structs
   |
 7 +     use std::time::Duration;
   |
 7 +     use tokio::time::Duration;
   |

For more information about this error, try `rustc --explain E0412`.
error: could not compile `riptide-search` (test "search_provider_unit_test") due to 1 previous error
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `emit_event` found for struct `std::sync::Arc<riptide_core::events::EventBus>` in the current scope
   --> crates/riptide-search/tests/search_provider_event_integration_test.rs:105:28
    |
105 |         self.event_emitter.emit_event(event).await
    |                            ^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `EventEmitter` which provides `emit_event` is implemented but not in scope; perhaps you want to import it
    |
  6 + use riptide_core::events::EventEmitter;
    |
help: there is a method `emit_events` with a similar name
    |
105 |         self.event_emitter.emit_events(event).await
    |                                      +

error[E0599]: no method named `emit_event` found for struct `std::sync::Arc<riptide_core::events::EventBus>` in the current scope
   --> crates/riptide-search/tests/search_provider_event_integration_test.rs:122:28
    |
122 |         self.event_emitter.emit_event(event).await
    |                            ^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `EventEmitter` which provides `emit_event` is implemented but not in scope; perhaps you want to import it
    |
  6 + use riptide_core::events::EventEmitter;
    |
help: there is a method `emit_events` with a similar name
    |
122 |         self.event_emitter.emit_events(event).await
    |                                      +

error[E0599]: no method named `emit_event` found for struct `std::sync::Arc<riptide_core::events::EventBus>` in the current scope
   --> crates/riptide-search/tests/search_provider_event_integration_test.rs:139:28
    |
139 |         self.event_emitter.emit_event(event).await
    |                            ^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `EventEmitter` which provides `emit_event` is implemented but not in scope; perhaps you want to import it
    |
  6 + use riptide_core::events::EventEmitter;
    |
help: there is a method `emit_events` with a similar name
    |
139 |         self.event_emitter.emit_events(event).await
    |                                      +

error[E0599]: no method named `emit_event` found for struct `std::sync::Arc<riptide_core::events::EventBus>` in the current scope
   --> crates/riptide-search/tests/search_provider_event_integration_test.rs:158:28
    |
158 |         self.event_emitter.emit_event(event).await
    |                            ^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `EventEmitter` which provides `emit_event` is implemented but not in scope; perhaps you want to import it
    |
  6 + use riptide_core::events::EventEmitter;
    |
help: there is a method `emit_events` with a similar name
    |
158 |         self.event_emitter.emit_events(event).await
    |                                      +

error[E0277]: `riptide_core::events::EventBus` doesn't implement `std::fmt::Debug`
  --> crates/riptide-search/tests/search_provider_event_integration_test.rs:81:5
   |
78 | #[derive(Debug)]
   |          ----- in this derive macro expansion
...
81 |     event_emitter: Arc<EventBus>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `riptide_core::events::EventBus`
   |
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`

Some errors have detailed explanations: E0277, E0599.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `riptide-search` (test "search_provider_event_integration_test") due to 5 previous errors
