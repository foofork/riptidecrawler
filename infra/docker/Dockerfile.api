# Multi-stage optimized build with caching
FROM rustlang/rust:nightly AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files first for better caching
COPY Cargo.toml Cargo.lock ./

# Copy all crate Cargo.toml files preserving structure
RUN mkdir -p crates wasm
COPY crates/riptide-api/Cargo.toml crates/riptide-api/
COPY crates/riptide-core/Cargo.toml crates/riptide-core/
COPY crates/riptide-headless/Cargo.toml crates/riptide-headless/
COPY crates/riptide-html/Cargo.toml crates/riptide-html/
COPY crates/riptide-intelligence/Cargo.toml crates/riptide-intelligence/
COPY crates/riptide-pdf/Cargo.toml crates/riptide-pdf/
COPY crates/riptide-performance/Cargo.toml crates/riptide-performance/
COPY crates/riptide-persistence/Cargo.toml crates/riptide-persistence/
COPY crates/riptide-search/Cargo.toml crates/riptide-search/
COPY crates/riptide-stealth/Cargo.toml crates/riptide-stealth/
COPY crates/riptide-streaming/Cargo.toml crates/riptide-streaming/
COPY crates/riptide-workers/Cargo.toml crates/riptide-workers/
COPY wasm/riptide-extractor-wasm/Cargo.toml wasm/riptide-extractor-wasm/

# Create stub source files for dependency caching
RUN mkdir -p crates/riptide-core/src crates/riptide-api/src \
    crates/riptide-html/src crates/riptide-intelligence/src \
    crates/riptide-pdf/src crates/riptide-performance/src \
    crates/riptide-persistence/src crates/riptide-search/src \
    crates/riptide-stealth/src crates/riptide-streaming/src \
    crates/riptide-workers/src wasm/riptide-extractor-wasm/src && \
    echo "fn main() {}" > crates/riptide-core/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-api/src/main.rs && \
    echo "fn main() {}" > crates/riptide-html/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-intelligence/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-pdf/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-performance/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-persistence/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-search/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-stealth/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-streaming/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-workers/src/lib.rs && \
    echo "fn main() {}" > wasm/riptide-extractor-wasm/src/lib.rs

# Build dependencies only (cached layer)
RUN rustup target add wasm32-wasip2 && \
    cargo build --release --bin riptide-api && \
    cd wasm/riptide-extractor-wasm && \
    cargo build --release --target wasm32-wasip2

# Copy actual source code
COPY crates crates/
COPY wasm wasm/

# Build with real source (uses cached dependencies)
RUN touch crates/*/src/lib.rs crates/*/src/main.rs wasm/*/src/lib.rs && \
    cargo build --release --bin riptide-api

# Build optimized WASM module
RUN cd wasm/riptide-extractor-wasm && \
    cargo build --release --target wasm32-wasip2

# Install wasm-opt for optimization
RUN apt-get update && apt-get install -y binaryen && \
    wasm-opt -Oz wasm/riptide-extractor-wasm/target/wasm32-wasip2/release/riptide_extractor_wasm.wasm \
    -o wasm/riptide-extractor-wasm/target/wasm32-wasip2/release/riptide_extractor_wasm.optimized.wasm || \
    cp wasm/riptide-extractor-wasm/target/wasm32-wasip2/release/riptide_extractor_wasm.wasm \
       wasm/riptide-extractor-wasm/target/wasm32-wasip2/release/riptide_extractor_wasm.optimized.wasm

# Optimized runtime stage
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies in single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl3 \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r riptide && useradd -r -g riptide riptide

WORKDIR /opt/riptide

# Create required directories
RUN mkdir -p /opt/riptide/extractor /opt/riptide/configs \
    && chown -R riptide:riptide /opt/riptide

# Copy optimized binary
COPY --from=builder --chown=riptide:riptide \
    /app/target/release/riptide-api /usr/local/bin/riptide-api

# Copy optimized WASM module
COPY --from=builder --chown=riptide:riptide \
    /app/wasm/riptide-extractor-wasm/target/wasm32-wasip2/release/riptide_extractor_wasm.optimized.wasm \
    /opt/riptide/extractor/extractor.wasm

# Copy configs
COPY --chown=riptide:riptide configs /opt/riptide/configs

# Switch to non-root user
USER riptide

EXPOSE 8080

# Environment optimization
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    MALLOC_ARENA_MAX=2

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]
CMD ["riptide-api", "--config", "/opt/riptide/configs/riptide.yml"]