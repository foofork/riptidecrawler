# Multi-stage optimized build with dependency caching
FROM rustlang/rust:nightly AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create directory structure and copy Cargo.toml files for all crates
RUN mkdir -p crates/riptide-core/src \
    crates/riptide-core/benches \
    crates/riptide-api/src \
    crates/riptide-headless/src \
    crates/riptide-workers/src \
    crates/riptide-html/src \
    crates/riptide-html/examples \
    crates/riptide-pdf/src \
    crates/riptide-stealth/src \
    crates/riptide-search/src \
    crates/riptide-intelligence/src \
    crates/riptide-performance/src \
    crates/riptide-persistence/src \
    crates/riptide-persistence/benches \
    crates/riptide-streaming/src \
    wasm/riptide-extractor-wasm/src

# Copy individual Cargo.toml files to preserve structure
COPY crates/riptide-core/Cargo.toml crates/riptide-core/
COPY crates/riptide-api/Cargo.toml crates/riptide-api/
COPY crates/riptide-headless/Cargo.toml crates/riptide-headless/
COPY crates/riptide-workers/Cargo.toml crates/riptide-workers/
COPY crates/riptide-html/Cargo.toml crates/riptide-html/
COPY crates/riptide-pdf/Cargo.toml crates/riptide-pdf/
COPY crates/riptide-stealth/Cargo.toml crates/riptide-stealth/
COPY crates/riptide-search/Cargo.toml crates/riptide-search/
COPY crates/riptide-intelligence/Cargo.toml crates/riptide-intelligence/
COPY crates/riptide-performance/Cargo.toml crates/riptide-performance/
COPY crates/riptide-persistence/Cargo.toml crates/riptide-persistence/
COPY crates/riptide-streaming/Cargo.toml crates/riptide-streaming/
COPY wasm/riptide-extractor-wasm/Cargo.toml wasm/riptide-extractor-wasm/

# Create stub source files for dependency pre-building
RUN echo "fn main() {}" > crates/riptide-core/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-core/benches/performance_benches.rs && \
    echo "fn main() {}" > crates/riptide-core/benches/strategies_bench.rs && \
    echo "fn main() {}" > crates/riptide-api/src/main.rs && \
    echo "fn main() {}" > crates/riptide-headless/src/main.rs && \
    echo "fn main() {}" > crates/riptide-headless/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-workers/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-html/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-html/examples/basic_extraction.rs && \
    echo "fn main() {}" > crates/riptide-pdf/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-stealth/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-search/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-intelligence/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-performance/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-persistence/src/lib.rs && \
    echo "fn main() {}" > crates/riptide-persistence/benches/persistence_benchmarks.rs && \
    echo "fn main() {}" > crates/riptide-streaming/src/lib.rs && \
    echo "fn main() {}" > wasm/riptide-extractor-wasm/src/lib.rs

# Pre-build dependencies (this layer will be cached)
RUN cargo build --release --bin riptide-headless

# Copy actual source code
COPY crates crates/
COPY wasm wasm/

# Build with real source (leverages cached dependencies)
RUN touch crates/*/src/lib.rs crates/*/src/main.rs wasm/*/src/lib.rs && \
    cargo build --release --bin riptide-headless

# Strip binary for smaller size
RUN strip target/release/riptide-headless

# Optimized runtime stage with Chrome
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies in minimal layers
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    chromium \
    chromium-driver \
    fonts-liberation \
    tini \
    # Chrome dependencies - grouped for better layer efficiency
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    xdg-utils \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r riptide && useradd -r -g riptide -s /bin/false riptide

# Create Chrome sandbox directory with proper permissions
RUN mkdir -p /opt/chrome && chown riptide:riptide /opt/chrome

WORKDIR /opt/riptide

# Copy optimized binary
COPY --from=builder --chown=riptide:riptide \
    /app/target/release/riptide-headless /usr/local/bin/riptide-headless

# Switch to non-root user
USER riptide

EXPOSE 9123

# Optimized environment variables
ENV RUST_LOG=info \
    CHROME_BIN=/usr/bin/chromium \
    CHROME_PATH=/usr/bin/chromium \
    DISPLAY=:99 \
    MALLOC_ARENA_MAX=2 \
    # Chrome optimization flags
    CHROME_DEVEL_SANDBOX=/usr/lib/chromium/chrome-sandbox \
    CHROME_FLAGS="--no-sandbox --headless --disable-gpu --disable-dev-shm-usage --disable-extensions --no-first-run"

# Use tini for proper signal handling and zombie reaping
ENTRYPOINT ["tini", "--"]
CMD ["riptide-headless"]